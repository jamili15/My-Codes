// pages/[id].tsx

import { useRouter } from 'next/router';
import { GetStaticPaths, GetStaticProps } from 'next';

interface PostData {
  id: string;
  title: string;
  content: string;
}

const PostPage: React.FC<{ postData: PostData }> = ({ postData }) => {
  const router = useRouter();
  const { id } = router.query;

  return (
    <div>
      <h1>Post {id}</h1>
      <h2>{postData.title}</h2>
      <p>{postData.content}</p>
    </div>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  const paths = [
    { params: { id: '1' } },
    { params: { id: '2' } },
    // Add more ids as needed
  ];

  return { paths, fallback: false };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const id = params?.id;
  const postData: PostData = {
    id: id as string,
    title: `Post Title ${id}`,
    content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
  };

  return {
    props: {
      postData,
    },
  };
};

export default PostPage;



// pages/index.tsx

import Link from 'next/link';

interface PostData {
  id: string;
  title: string;
}

const Home: React.FC<{ posts: PostData[] }> = ({ posts }) => {
  return (
    <div>
      <h1>Blog Posts</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>
            <Link href={`/${post.id}`}>
              <a>{post.title}</a>
            </Link>
          </li>
        ))}
      </ul>
    </div>
  );
};

export const getStaticProps = async () => {
  // Fetch the list of posts from your CMS or API
  const posts: PostData[] = [
    { id: '1', title: 'Post 1' },
    { id: '2', title: 'Post 2' },
    // Add more posts as needed
  ];

  return {
    props: {
      posts,
    },
  };
};

export default Home;
