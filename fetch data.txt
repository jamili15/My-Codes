// components/MyComponent.tsx
import React from "react";

interface MyComponentProps {
  data: {
    userId: number;
    id: number;
    title: string;
    body: string;
  };
}

const MyComponent: React.FC<MyComponentProps> = ({ data }) => {
  return (
    <div className="flex flex-col gap-5 px-20 py-5">
      <h2 className="text-3xl font-bold">{data.title}</h2>
      <p className="text-xl">{data.body}</p>
    </div>
  );
};

export default MyComponent;



// pages/index.tsx
import { useState } from "react";
import { GetStaticProps } from "next";
import MyComponent from "../components/MyComponent";

interface HomeProps {
  data: {
    userId: number;
    id: number;
    title: string;
    body: string;
  };
  error?: string;
}

const Home: React.FC<HomeProps> = ({ data, error }) => {
  const [inputId, setInputId] = useState<number | string>("");
  const [displayedData, setDisplayedData] = useState<HomeProps["data"] | null>(
    null
  );

  const fetchData = async () => {
    try {
      const response = await fetch(
        `https://jsonplaceholder.typicode.com/posts/${inputId}`
      );
      if (!response.ok) {
        throw new Error("Post not found");
      }
      const newData = await response.json();
      setDisplayedData(newData);
    } catch (error) {
      setDisplayedData(null);
      console.error(error);
    }
  };

  return (
    <div>
      <h1>My Next.js App</h1>
      <div>
        <label>
          Enter Post ID:
          <input
            type="text"
            value={inputId}
            onChange={(e) => setInputId(e.target.value)}
          />
        </label>
        <button onClick={fetchData}>Fetch Data</button>
      </div>
      {error && <p style={{ color: "red" }}>{error}</p>}
      {displayedData ? (
        <MyComponent data={displayedData} />
      ) : (
        <p>No data to display. Enter a valid Post ID and click Fetch Data.</p>
      )}
    </div>
  );
};

export const getStaticProps: GetStaticProps<HomeProps> = async () => {
  const response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
  const data = await response.json();

  return {
    props: {
      data,
    },
  };
};

export default Home;


_____________________________________________________


useEffect(() => {
  const fetchData = async () => {
    try {
      const response = await fetch("https://jsonplaceholder.typicode.com/posts");
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      const data: DataItem[] = await response.json();
      setData(data);
      setLoading(false);
    } catch (err) {
      setError("Error fetching data");
      setLoading(false);
    }
  };

  fetchData();
}, []);


_________________________________________________________________

interface PostProps {
  title: string;
  body: string;
}



  const [post, setPost] = useState<PostProps | undefined>(undefined);

  useEffect(() => {
    fetch("https://dummyjson.com/posts/1")
      .then((res) => res.json())
      .then((data) => {
        setPost(data);
      });
  }, []);





